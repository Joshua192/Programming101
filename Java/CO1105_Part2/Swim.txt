package co1105.cw2.jo189;

import java.util.Objects;

public class Swim extends Activity{
    private int poolSize;
    private int numLengths;
    private int time;
    private double timeMin;
    private float averagespeed;

    Swim(int ps, int n, int t) throws InvalidActivityException{
        super(t);
        this.time = t;
        this.poolSize = ps;
        this.numLengths = n;
        effort = (double) 20*poolSize*numLengths/t;
        
        this.averagespeed = this.poolSize*this.numLengths/t;
        
        
        if(this.poolSize <= 1 || this.poolSize >= 100) {
        	throw new InvalidActivityException("Pool size must be between 1m and 100m");
        }
        if(this.numLengths <= 1 || this.numLengths >= 1000) {
        	throw new InvalidActivityException("Number of lengths must be between 1 and 1000");
        }
        if(this.time <= 0) {
        	throw new InvalidActivityException("Recorded time must be greater than 0s");
        }
        
        if(averagespeed >= 4) {
        	throw new InvalidActivityException("Recorded time and distance is not possible");

        }
    }

    public int getPoolSize(){
        return this.poolSize;
    }

    public int getLengths(){
        return this.numLengths;
    }

    public int getDistance(){
        return this.poolSize;
        
        
    }
    
    private double getTimeMin(){
    	timeMin = (double)this.time/60;
    	return timeMin;
    }
    public String toString(){
    	if(activityID < 10) {
            return String.format("S0%d : effort score %4s (%d x %dm in %4sminutes)", activityID,String.format("%.1f",effort),getLengths(),getDistance(),String.format("%.1f",getTimeMin()));
    	}
    	else{
            return String.format("S%d : effort score %4s (%d x %dm in %4sminutes)", activityID,String.format("%.1f",effort),getLengths(),getDistance(),String.format("%.1f",getTimeMin()));
    	}

    }

	@Override
	public int hashCode() {
		return Objects.hash(numLengths, poolSize, time);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Swim other = (Swim) obj;
		return numLengths == other.numLengths && poolSize == other.poolSize && time == other.time;
	}

	

	
}